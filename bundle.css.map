{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\components\\Footer.svelte",
    "..\\src\\components\\Header.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { fade } from 'svelte/transition';\r\n  import Header from './components/Header.svelte';\r\n  import Footer from './components/Footer.svelte';\r\n  import ChartSimulacao from './components/Chart.svelte'; //chart tempo Medio na fila\r\n  import {SIMULATION_EXAMPLE} from './constants/mockSimulacoes.js';\r\n  import {generateRandom, nextExponential, nextNormal} from './services/randomNumbers.js';\r\n\r\n\r\n  //VARIAVEIS DO SISTEMA\r\n  let numeroDeClientesAcumulados = 1;\r\n  let tempoAtualDaSimulação = 0;\r\n  let tempoTotalDeSimulacao = 0;\r\n  let temposEntreTodasChegadas = [];\r\n  let temposDeTodosOsServicos = [];\r\n  let numeroDeServicos = 15;\r\n  let servicos = [];\r\n\r\n\r\n\r\n  // VARIAVEIS PARA GERAÇÃO DINAMICA DOS GRAFICOS\r\n  let listaDeTemposMediosNafila = []\r\n  let listaDeTemposMediosDeServico = []\r\n  let listaDeProbabilidadesDeOperadoresLivre = []\r\n  let listaDeProbDeClienteEsperarNaFila = []\r\n  let listaDeTemposMediosDespendidoNoSistema = []\r\n  \r\n  \r\n  \r\n\r\n  $: ultimoServico = () => servicos[servicos.length - 1];\r\n\r\n\r\n  // FUNÇÕES PARA GERAÇÃO DINAMICA DO RELATORIO (GRAFICOS E INFORMAÇÕES)\r\n  $: tempoMedioDeServicos = () => {\r\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\r\n    let listaDeTemposDeServicos = servicos.map( item => item.tempoServico);\r\n    let tempoTotalDeServicos = listaDeTemposDeServicos.reduce((acc, atual) => acc += atual);\r\n    return tempoTotalDeServicos / numeroTotalDeClientes;\r\n  }\r\n\r\n  $: tempoMedioDeEsperaNaFila = () => {\r\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\r\n    let listaDeTemposDeEspera = servicos.map( item => item.tempoClienteNaFila);\r\n    let tempoDeEsperaTotal = listaDeTemposDeEspera.reduce((acc, atual) => acc += atual);\r\n    return tempoDeEsperaTotal / numeroDeClientesAcumulados;\r\n  }\r\n\r\n  $: probabilidadeDeEspera = () => {\r\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\r\n    let listaDeEsperasPelosClientes= servicos.map(servico => servico.tempoClienteNaFila);\r\n    let numeroDeClientesQueEsperaram = listaDeEsperasPelosClientes.filter( tempo => tempo > 0 && tempo !== undefined).length;\r\n    return numeroDeClientesQueEsperaram / numeroTotalDeClientes;\r\n  }\r\n\r\n  $: probabilidadeDeOperadorLivre = () => {\r\n    let listaDeTemposLivresDosOperadores= servicos.map(servico => servico.tempoLivreDoOperador);\r\n    let totalDeTempoLivreDosOperadores = listaDeTemposLivresDosOperadores.reduce((acc, atual) => acc += atual);\r\n    return totalDeTempoLivreDosOperadores / tempoTotalDeSimulacao;\r\n  }\r\n  \r\n  $: tempoMedioDespendidoNoSistema = () => {\r\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\r\n    let listaDeTemposNoSistema= servicos.map(servico => servico.tempoClienteNoSistema);\r\n    let totalDeTemposNoSistema = listaDeTemposNoSistema.reduce((acc, atual) => acc += atual);\r\n    return totalDeTemposNoSistema / numeroTotalDeClientes;\r\n  }\r\n\r\n  const alimentarDadosDosGraficos = () => {\r\n    listaDeTemposMediosNafila = [...listaDeTemposMediosNafila, tempoMedioDeEsperaNaFila() ]\r\n    listaDeTemposMediosDeServico = [...listaDeTemposMediosDeServico, tempoMedioDeServicos() ]\r\n    listaDeProbabilidadesDeOperadoresLivre = [...listaDeProbabilidadesDeOperadoresLivre, probabilidadeDeOperadorLivre() ]\r\n    listaDeProbDeClienteEsperarNaFila = [...listaDeProbDeClienteEsperarNaFila, probabilidadeDeEspera() ]\r\n    listaDeTemposMediosDespendidoNoSistema = [...listaDeTemposMediosDespendidoNoSistema, tempoMedioDespendidoNoSistema() ]\r\n  }\r\n\r\n\r\n  // FUNÇÕES DA SIMULAÇÃO\r\n  const gerarNaoPrimeiroServico = (NTDUC, NTSNR) => {\r\n    const novoCliente = numeroDeClientesAcumulados + 1;\r\n    const novoTempoDesdeUltimaChegada = NTDUC; //Essa parte preciso gerar aleatorio mais pra frente\r\n    const novoTempoChegadaNoRelogio = ultimoServico().tempoChegadaNoRelogio + novoTempoDesdeUltimaChegada;\r\n    const novoTempoDeServico = NTSNR; // Essa parte depois vai precisar gerar aleatorio tambem\r\n\r\n    const novoTempoInicioServicoNoRelogio = () => {\r\n      const tempoDoUltimoServicoJaConcluido = ultimoServico().tempoFinalDoServicoNoRelogio;\r\n      if (tempoDoUltimoServicoJaConcluido > novoTempoChegadaNoRelogio)\r\n        return tempoDoUltimoServicoJaConcluido\r\n      else\r\n         return novoTempoChegadaNoRelogio\r\n    }\r\n  \r\n    const novoTempoClienteNaFila = () => {\r\n      const diferencaEntreTempos = ultimoServico().tempoFinalDoServicoNoRelogio - novoTempoChegadaNoRelogio;\r\n      if (diferencaEntreTempos > 0)\r\n        return diferencaEntreTempos\r\n      else\r\n        return 0\r\n    }\r\n\r\n    const novoTempoFinalDoServicoNoRelogio = novoTempoDeServico + novoTempoInicioServicoNoRelogio();\r\n    const novoTempoClienteNoSistema = novoTempoDeServico + novoTempoClienteNaFila();\r\n    const novoTempoLivreDoOperador =  novoTempoInicioServicoNoRelogio() - ultimoServico().tempoFinalDoServicoNoRelogio;\r\n\r\n    const novoServico = {\r\n      cliente: novoCliente,\r\n\t\t\ttempoDesdeUltimaChegada: novoTempoDesdeUltimaChegada,\r\n\t\t\ttempoChegadaNoRelogio: novoTempoChegadaNoRelogio,\r\n\t\t\ttempoServico: novoTempoDeServico,\r\n\t\t\ttempoInicioServicoNoRelogio: novoTempoInicioServicoNoRelogio(),\r\n\t\t\ttempoClienteNaFila: novoTempoClienteNaFila(),\r\n\t\t\ttempoFinalDoServicoNoRelogio: novoTempoFinalDoServicoNoRelogio,\r\n\t\t\ttempoClienteNoSistema: novoTempoClienteNoSistema,\r\n\t\t\ttempoLivreDoOperador: novoTempoLivreDoOperador\r\n    };\r\n\r\n    numeroDeClientesAcumulados = numeroDeClientesAcumulados + 1;\r\n\r\n    return novoServico;\r\n\r\n  }\r\n\r\n  const gerarPrimeiroServico = (NTDUC, NTSNR) => {\r\n\r\n    const novoTempoFinalDoServicoNoRelogio = NTDUC + NTSNR;\r\n    const novoTempoClienteNoSistema = NTSNR ;\r\n\r\n    const novoServico = {\r\n      cliente: 1,\r\n\t\t\ttempoDesdeUltimaChegada: NTDUC,\r\n\t\t\ttempoChegadaNoRelogio: NTDUC,\r\n\t\t\ttempoServico: NTSNR,\r\n\t\t\ttempoInicioServicoNoRelogio: NTDUC,\r\n\t\t\ttempoClienteNaFila: 0,\r\n\t\t\ttempoFinalDoServicoNoRelogio: novoTempoFinalDoServicoNoRelogio,\r\n\t\t\ttempoClienteNoSistema: novoTempoClienteNoSistema,\r\n\t\t\ttempoLivreDoOperador: NTDUC\r\n    };\r\n\r\n    return novoServico;\r\n  }\r\n\r\n  const gerarServico = (NTDUC, NTSNR) => {\r\n    let novoServico;\r\n\r\n    let naoEhPrimeiroServico = servicos.length != 0\r\n    \r\n    if(naoEhPrimeiroServico)\r\n      novoServico = gerarNaoPrimeiroServico(NTDUC, NTSNR);\r\n    else\r\n      novoServico = gerarPrimeiroServico(NTDUC, NTSNR);\r\n\r\n    return novoServico\r\n  }\r\n\r\n\r\n  const gerarTEC = () => {\r\n    if (tecSelecionado.id === 1){\r\n      temposEntreTodasChegadas = [...temposEntreTodasChegadas, inputMeanTEC]\r\n    }\r\n\r\n    if(tecSelecionado.id === 2){\r\n      let novoTEC = nextExponential((1/inputMeanTEC));\r\n      temposEntreTodasChegadas = [...temposEntreTodasChegadas, novoTEC]\r\n    }\r\n\r\n    if(tecSelecionado.id === 3){\r\n      let novoTEC =  nextNormal(inputMeanTEC, inputStdTEC);\r\n      temposEntreTodasChegadas = [...temposEntreTodasChegadas, novoTEC]\r\n    }\r\n  }\r\n\r\n  const gerarTS = () => {\r\n    if (tsSelecionado.id === 1){\r\n      temposDeTodosOsServicos = [...temposDeTodosOsServicos, inputMeanTS]\r\n    }\r\n\r\n    if(tsSelecionado.id === 2){\r\n      let novoTS = nextExponential((1/inputMeanTS));\r\n      temposDeTodosOsServicos = [...temposDeTodosOsServicos, novoTS]\r\n    }\r\n\r\n    if(tsSelecionado.id === 3){\r\n      let novoTS = nextNormal(inputMeanTS, inputStdTS);\r\n      temposDeTodosOsServicos = [...temposDeTodosOsServicos, novoTS]\r\n    }\r\n  }\r\n\r\n\r\n  const simularProblema = () => {\r\n    var i = 0;\r\n\r\n    while (tempoAtualDaSimulação < tempoTotalDeSimulacao ){\r\n      gerarTEC()\r\n      gerarTS()\r\n      \r\n      let novoServico = gerarServico(temposEntreTodasChegadas[i], temposDeTodosOsServicos[i] );\r\n      servicos = [...servicos, novoServico];\r\n      tempoAtualDaSimulação = tempoAtualDaSimulação + novoServico.tempoDesdeUltimaChegada;\r\n      i++;\r\n      alimentarDadosDosGraficos();\r\n      console.log(tempoAtualDaSimulação)\r\n    }\r\n\r\n  }\r\n\r\n  // FUNÇÕES DISPARADAS PELOS BOTÕES\r\n\tconst handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    simularProblema();\r\n\r\n  }\r\n\r\n  const resetSimulation = () => {\r\n    numeroDeClientesAcumulados = 1;\r\n    tempoAtualDaSimulação = 0;\r\n    tempoTotalDeSimulacao = 0;\r\n    temposEntreTodasChegadas = [];\r\n    temposDeTodosOsServicos = [];\r\n    servicos = []\r\n\r\n    listaDeTemposMediosNafila = []\r\n    listaDeTemposMediosDeServico = []\r\n    listaDeProbabilidadesDeOperadoresLivre = []\r\n    listaDeProbDeClienteEsperarNaFila = []\r\n    listaDeTemposMediosDespendidoNoSistema = []\r\n  }\r\n\r\n  const handleSimularSlideClick = () => {\r\n      resetSimulation()\r\n      \r\n      numeroDeServicos = SIMULATION_EXAMPLE.numeroDeServicos;\r\n      tempoTotalDeSimulacao = SIMULATION_EXAMPLE.tempoTotalDeSimulacao;\r\n      \r\n\r\n      for(let i = 0; i < numeroDeServicos; i++ ){\r\n        setTimeout(() => {\r\n          let novoServico = gerarServico(SIMULATION_EXAMPLE.temposEntreTodasChegadas[i],SIMULATION_EXAMPLE.temposDeTodosOsServicos[i])\r\n          servicos = [...servicos, novoServico];\r\n          alimentarDadosDosGraficos()\r\n        },1000 * i)\r\n      }\r\n  }\r\n\r\n\r\n  // CONTROLE FORMULÁRIO\r\n  let tecOpcoes = [\r\n\t\t{ id: 1, text: `Determinístico` },\r\n    { id: 2, text: `Aleatório Exponencial` },\r\n    { id: 3, text: `Aleatório Normal`}\r\n  ];\r\n\r\n  let tsOpcoes = [\r\n\t\t{ id: 1, text: `Determinístico` },\r\n    { id: 2, text: `Aleatório Exponencial` },\r\n    { id: 3, text: `Aleatório Normal`}\r\n  ];\r\n\r\n  let tecSelecionado = \"\";\r\n  let tsSelecionado = \"\";\r\n\r\n  let inputMeanTEC = \"\";\r\n  let inputStdTEC = \"\";\r\n\r\n  let inputMeanTS = \"\";\r\n  let inputStdTS = \"\";\r\n  \r\n\r\n \r\n\r\n\r\n</script>\r\n\r\n<style>\r\n  :global(*,*::after,*::before) {\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n\r\n  @media print {\r\n    header, footer, form, .btn-imprimir{\r\n      display: none;\r\n      visibility: hidden;\r\n    }\r\n  }\r\n\r\n\r\n\t\r\n\tmain{\r\n\t\tmargin-top:2rem;\r\n\t\tmax-width: 1400px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 1rem;\r\n\t}\r\n\r\n  form{\r\n    background-color: #fdfdfd;\r\n    padding:10px;\r\n  }\r\n</style>\r\n\r\n\r\n\r\n<Header/>\r\n\r\n<form class=\"container my-5\" on:submit={handleSubmit}>\r\n  <div class=\"form-row\">\r\n    <div class=\"form-group col-md-4 offset-md-2\">\r\n      <label>Tempo da simulação (em minutos) <strong>(max 24 hrs)</strong></label>\r\n      <input required bind:value={tempoTotalDeSimulacao} type=\"number\" min=\"1\" max=\"1440\" class=\"form-control\" placeholder=\"tempo da simulação\">\r\n    </div>\r\n  </div>\r\n  \r\n  <!-- Tempo entre chegadas -->\r\n   <div class=\"form-row\">\r\n    <div class=\"form-group col-md-4 offset-md-2\">\r\n      <label >Tempo entre chegadas</label>\r\n      <select required class=\"form-control\" value={tecSelecionado}  bind:value={tecSelecionado}>\r\n        <option value={0}>\r\n          Selecione alguma...\r\n        </option>\r\n        {#each tecOpcoes as option}\r\n          <option value={option}>\r\n            {option.text}\r\n          </option>\r\n        {/each}\r\n      </select>\r\n    </div>\r\n\r\n  {#if tecSelecionado.id === 1 }\r\n     <div in:fade  class=\"form-group col-md-4\">\r\n      <label >Qual o tempo entre as chegadas?</label>\r\n      <input type=\"number\" bind:value={inputMeanTEC} class=\"form-control\"  min=\"1\" max=\"999\" placeholder=\"tempo em minutos\">\r\n    </div>\r\n  {:else if tecSelecionado.id === 2}\r\n    <div in:fade class=\"form-group col-md-2\">\r\n      <label for=\"inputLambdaExponencial\">Valor da Média</label>\r\n      <input type=\"number\" step=\"0.01\" bind:value={inputMeanTEC} class=\"form-control\" id=\"inputLambdaExponencial\" placeholder=\"tempo em minutos\">\r\n    </div>\r\n  {:else if tecSelecionado.id === 3}\r\n    <div in:fade class=\"form-group col-md-2\">\r\n      <label for=\"inputMeanNormal\">Valor da Média</label>\r\n      <input type=\"number\" step=\"0.01\" bind:value={inputMeanTEC} class=\"form-control\" id=\"inputMeanNormal\" placeholder=\"tempo em minutos\">\r\n    </div>\r\n    <div in:fade class=\"form-group col-md-2\">\r\n      <label for=\"inputStdNormal\">Valor da Variância</label>\r\n      <input type=\"number\" step=\"0.01\" bind:value={inputStdTEC} class=\"form-control\" id=\"inputStdNormal\" placeholder=\"tempo em minutos\">\r\n    </div>\r\n\r\n  {/if}\r\n\r\n  </div>\r\n\r\n \r\n  <!-- Tempo de serviços -->\r\n  <div class=\"form-row\">\r\n    <div class=\"form-group col-md-4 offset-md-2\">\r\n      <label>Tempo dos serviços</label>\r\n      <select required class=\"form-control\" value={tsSelecionado}  bind:value={tsSelecionado}>\r\n        <option value={0}>\r\n          Selecione alguma...\r\n        </option>\r\n        {#each tsOpcoes as option}\r\n          <option value={option}>\r\n            {option.text}\r\n          </option>\r\n        {/each}\r\n      </select>\r\n    </div>\r\n\r\n  {#if tsSelecionado.id === 1 }\r\n     <div in:fade  class=\"form-group col-md-4\">\r\n      <label for=\"inputNumeroDeServicos\">Quantos minutos o serviço demora?</label>\r\n      <input type=\"number\" bind:value={inputMeanTS} class=\"form-control\"  id=\"inputNumeroDeServicos\" min=\"1\" max=\"999\" placeholder=\"tempo em minutos\">\r\n    </div>\r\n  {:else if tsSelecionado.id === 2}\r\n    <div in:fade class=\"form-group col-md-2\">\r\n      <label for=\"inputNumeroDeServicos\">Valor da Média</label>\r\n      <input type=\"number\" step=\"0.01\" class=\"form-control\" bind:value={inputMeanTS} id=\"inputNumeroDeServicos\" placeholder=\"\">\r\n    </div>\r\n  {:else if tsSelecionado.id === 3}\r\n    <div in:fade class=\"form-group col-md-2\">\r\n      <label for=\"inputNumeroDeServicos\">Valor da Média</label>\r\n      <input type=\"number\" step=\"0.01\" class=\"form-control\" bind:value={inputMeanTS} id=\"inputNumeroDeServicos\" placeholder=\"\">\r\n      </div>\r\n      <div in:fade class=\"form-group col-md-2\">\r\n      <label for=\"inputNumeroDeServicos\">Valor da Variância</label>\r\n      <input type=\"number\" step=\"0.01\" class=\"form-control\" bind:value={inputStdTS} id=\"inputNumeroDeServicos\" placeholder=\"\">\r\n    </div>\r\n\r\n  {/if}\r\n\r\n  </div>\r\n  \r\n  <div class=\"offset-md-2\">\r\n    <input type=\"submit\" value=\"Simular\" class=\"btn btn-large btn-primary\">\r\n\r\n      <button class=\"btn btn-large btn-danger float-right\" on:click|preventDefault={handleSimularSlideClick}> Simular Exemplo Slide</button>\r\n  </div>\r\n  \r\n  \r\n</form>\r\n\r\n<hr>\r\n\r\n<div class=\"container\">\r\n  <div class=\"d-flex justify-content-end text-right\">\r\n    <button class=\"btn-imprimir btn btn-secondary\" on:click=\"{() => window.print()}\">Imprimir</button>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4\">\r\n      <ChartSimulacao  data={listaDeTemposMediosNafila} backgroundColor='#EF5B5B' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Tempo médio na fila de espera\" />\r\n    </div>\r\n\r\n    <div class=\"col-md-4\">\r\n      <ChartSimulacao  data={listaDeTemposMediosDeServico} backgroundColor='#BAA5FF' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Tempo médio de serviço\" />\r\n    </div>\r\n\r\n    <div class=\"col-md-4\">\r\n      {#if servicos.length != 0}\r\n        <div transition:fade=\"{{duration:1000}}\" class=\"pt-4\">\r\n          <p>Número total de clientes: <span class=\"bg-primary p-1 text-light rounded\">{numeroDeClientesAcumulados}</span></p>\r\n          <p>Tempo médio de espera na fila: <span class=\"bg-primary p-1 text-light rounded\">{ tempoMedioDeEsperaNaFila().toFixed(2)}</span></p>\r\n          <p>Probabilidade de um cliente esperar na fila: <span class=\"bg-primary p-1 text-light rounded\">{probabilidadeDeEspera().toFixed(2)}</span></p>\r\n          <p>Probabilidade do operador livre: <span class=\"bg-primary p-1 text-light rounded\">{probabilidadeDeOperadorLivre().toFixed(2)}</span></p>\r\n          <p>Tempo médio de serviço: <span class=\"bg-primary p-1 text-light rounded\">{tempoMedioDeServicos().toFixed(2)}</span></p>\r\n          <p>Tempo médio despendido no sistema: <span class=\"bg-primary p-1 text-light rounded\">{tempoMedioDespendidoNoSistema().toFixed(2)}</span></p>\r\n        </div>\r\n      {/if}\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n   <div class=\"col-md-4\">\r\n      <ChartSimulacao  data={listaDeProbabilidadesDeOperadoresLivre} backgroundColor='#466365' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Probabilidade de operador livre\" />\r\n    </div>\r\n\r\n    <div class=\"col-md-4\">\r\n      <ChartSimulacao  data={listaDeProbDeClienteEsperarNaFila} backgroundColor='#ABFAA9' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Probabilidade do cliente esperar\" />\r\n    </div>\r\n\r\n     <div class=\"col-md-4\">\r\n      <ChartSimulacao  data={listaDeTemposMediosDespendidoNoSistema} backgroundColor='#C6B9CD' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Tempos Médios despendido no sistema\" />\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n\r\n<hr>\r\n\r\n<main>\r\n  <table class=\"table table-striped table-hover my-4\">\r\n    <thead class=\"bg-secondary text-light\">\r\n      <tr>\r\n        <th scope=\"col\">Cliente</th>\r\n        <th scope=\"col\">Tempo desde ultima chegada</th>\r\n        <th scope=\"col\">Tempo de chegada no relogio</th>\r\n        <th scope=\"col\">Tempo de serviço</th>\r\n        <th scope=\"col\">Tempo de início do serviço no relógio</th>\r\n        <th scope=\"col\">Tempo de cliente na fila</th>\r\n        <th scope=\"col\">Tempo final do serviço no relógio</th>\r\n        <th scope=\"col\">Tempo do cliente no sistema</th>\r\n        <th scope=\"col\">Tempo livre do operador</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {#if servicos.length != 0}\r\n        {#each servicos as servico}\r\n          <tr transition:fade=\"{{duration: 1000, delay: 400}}\">\r\n            <th scope=\"row\">{servico.cliente}</th>\r\n            <td>{servico.tempoDesdeUltimaChegada.toFixed(2)}</td>\r\n            <td>{servico.tempoChegadaNoRelogio.toFixed(2)}</td>\r\n            <td>{servico.tempoServico.toFixed(2)}</td>\r\n            <td>{servico.tempoInicioServicoNoRelogio.toFixed(2)}</td>\r\n            <td>{servico.tempoClienteNaFila.toFixed(2)}</td>\r\n            <td>{servico.tempoFinalDoServicoNoRelogio.toFixed(2)}</td>\r\n            <td>{servico.tempoClienteNoSistema.toFixed(2)}</td>\r\n            <td>{servico.tempoLivreDoOperador.toFixed(2)}</td>\r\n          </tr>\r\n\r\n        {/each}\r\n      {/if}\r\n    </tbody>\r\n  </table>\r\n\r\n\r\n</main>\r\n\r\n<Footer/>\r\n\r\n\r\n\r\n\r\n\r\n",
    "<script>\r\n\r\n</script>\r\n\r\n<style>\r\n  .footer {\r\n    background-color: #0B3142;\r\n  }\r\n</style>\r\n\r\n<footer class=\"footer text-center text-light py-4\">\r\n  Desenvolvido por Fabrício Ziliotti, Guilherme Raimondi e Hígor Emanuel\r\n</footer>\r\n",
    "<script>\r\n\r\n</script>\r\n\r\n<style>\r\n \r\n  .header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100px;\r\n    background: #0B3142;\r\n  }\r\n\r\n  .header__title {\r\n\t\tfont-size: 30px;\r\n\t\ttext-transform: uppercase;\r\n    letter-spacing: 3px;\r\n    color: white;\r\n\t}\r\n\t\r\n</style>\r\n\r\n<header class=\"header\">\r\n  <h1 class=\"header__title\">Teoria das filas - Modelo MM1</h1>\r\n</header>\r\n\r\n"
  ],
  "names": [],
  "mappings": "AAkRU,oBAAoB,AAAE,CAAC,AAC7B,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC,AAED,OAAO,KAAK,AAAC,CAAC,AACI,mBAAI,CAAE,4BAAa,CAAC,AAClC,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,MAAM,AACpB,CAAC,AACH,CAAC,AAIF,mBAAI,CAAC,AACJ,WAAW,IAAI,CACf,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,AACd,CAAC,AAEA,mBAAI,CAAC,AACH,gBAAgB,CAAE,OAAO,CACzB,QAAQ,IAAI,AACd,CAAC;ACrSD,OAAO,cAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,AAC3B,CAAC;ACDD,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,cAAc,cAAC,CAAC,AAChB,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,SAAS,CACvB,cAAc,CAAE,GAAG,CACnB,KAAK,CAAE,KAAK,AACf,CAAC"
}