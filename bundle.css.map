{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\components\\Footer.svelte",
    "..\\src\\components\\Header.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { fade } from 'svelte/transition';\n  import Header from './components/Header.svelte';\n  import Footer from './components/Footer.svelte';\n  import ChartSimulacao from './components/Chart.svelte'; //chart tempo Medio na fila\n  import {SIMULATION_EXAMPLE} from './constants/mockSimulacoes.js';\n  import {generateRandom, nextExponential, nextNormal} from './services/randomNumbers.js';\n\n\n  //VARIAVEIS DO SISTEMA\n  let numeroDeClientesAcumulados = 1;\n  let tempoAtualDaSimulação = 0;\n  let tempoTotalDeSimulacao = 0;\n  let temposEntreTodasChegadas = [];\n  let temposDeTodosOsServicos = [];\n  let numeroDeServicos = 15;\n  let servicos = [];\n\n\n\n  // VARIAVEIS PARA GERAÇÃO DINAMICA DOS GRAFICOS\n  let listaDeTemposMediosNafila = []\n  let listaDeTemposMediosDeServico = []\n  let listaDeProbabilidadesDeOperadoresLivre = []\n  let listaDeProbDeClienteEsperarNaFila = []\n  let listaDeTemposMediosDespendidoNoSistema = []\n  \n  \n  \n\n  $: ultimoServico = () => servicos[servicos.length - 1];\n\n\n  // FUNÇÕES PARA GERAÇÃO DINAMICA DO RELATORIO (GRAFICOS E INFORMAÇÕES)\n  $: tempoMedioDeServicos = () => {\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\n    let listaDeTemposDeServicos = servicos.map( item => item.tempoServico);\n    let tempoTotalDeServicos = listaDeTemposDeServicos.reduce((acc, atual) => acc += atual);\n    return tempoTotalDeServicos / numeroTotalDeClientes;\n  }\n\n  $: tempoMedioDeEsperaNaFila = () => {\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\n    let listaDeTemposDeEspera = servicos.map( item => item.tempoClienteNaFila);\n    let tempoDeEsperaTotal = listaDeTemposDeEspera.reduce((acc, atual) => acc += atual);\n    return tempoDeEsperaTotal / numeroDeClientesAcumulados;\n  }\n\n  $: probabilidadeDeEspera = () => {\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\n    let listaDeEsperasPelosClientes= servicos.map(servico => servico.tempoClienteNaFila);\n    let numeroDeClientesQueEsperaram = listaDeEsperasPelosClientes.filter( tempo => tempo > 0 && tempo !== undefined).length;\n    return numeroDeClientesQueEsperaram / numeroTotalDeClientes;\n  }\n\n  $: probabilidadeDeOperadorLivre = () => {\n    let listaDeTemposLivresDosOperadores= servicos.map(servico => servico.tempoLivreDoOperador);\n    let totalDeTempoLivreDosOperadores = listaDeTemposLivresDosOperadores.reduce((acc, atual) => acc += atual);\n    return totalDeTempoLivreDosOperadores / tempoTotalDeSimulacao;\n  }\n  \n  $: tempoMedioDespendidoNoSistema = () => {\n    let numeroTotalDeClientes = numeroDeClientesAcumulados\n    let listaDeTemposNoSistema= servicos.map(servico => servico.tempoClienteNoSistema);\n    let totalDeTemposNoSistema = listaDeTemposNoSistema.reduce((acc, atual) => acc += atual);\n    return totalDeTemposNoSistema / numeroTotalDeClientes;\n  }\n\n  const alimentarDadosDosGraficos = () => {\n    listaDeTemposMediosNafila = [...listaDeTemposMediosNafila, tempoMedioDeEsperaNaFila() ]\n    listaDeTemposMediosDeServico = [...listaDeTemposMediosDeServico, tempoMedioDeServicos() ]\n    listaDeProbabilidadesDeOperadoresLivre = [...listaDeProbabilidadesDeOperadoresLivre, probabilidadeDeOperadorLivre() ]\n    listaDeProbDeClienteEsperarNaFila = [...listaDeProbDeClienteEsperarNaFila, probabilidadeDeEspera() ]\n    listaDeTemposMediosDespendidoNoSistema = [...listaDeTemposMediosDespendidoNoSistema, tempoMedioDespendidoNoSistema() ]\n  }\n\n\n  // FUNÇÕES DA SIMULAÇÃO\n  const gerarNaoPrimeiroServico = (NTDUC, NTSNR) => {\n    const novoCliente = numeroDeClientesAcumulados + 1;\n    const novoTempoDesdeUltimaChegada = NTDUC; //Essa parte preciso gerar aleatorio mais pra frente\n    const novoTempoChegadaNoRelogio = ultimoServico().tempoChegadaNoRelogio + novoTempoDesdeUltimaChegada;\n    const novoTempoDeServico = NTSNR; // Essa parte depois vai precisar gerar aleatorio tambem\n\n    const novoTempoInicioServicoNoRelogio = () => {\n      const tempoDoUltimoServicoJaConcluido = ultimoServico().tempoFinalDoServicoNoRelogio;\n      if (tempoDoUltimoServicoJaConcluido > novoTempoChegadaNoRelogio)\n        return tempoDoUltimoServicoJaConcluido\n      else\n         return novoTempoChegadaNoRelogio\n    }\n  \n    const novoTempoClienteNaFila = () => {\n      const diferencaEntreTempos = ultimoServico().tempoFinalDoServicoNoRelogio - novoTempoChegadaNoRelogio;\n      if (diferencaEntreTempos > 0)\n        return diferencaEntreTempos\n      else\n        return 0\n    }\n\n    const novoTempoFinalDoServicoNoRelogio = novoTempoDeServico + novoTempoInicioServicoNoRelogio();\n    const novoTempoClienteNoSistema = novoTempoDeServico + novoTempoClienteNaFila();\n    const novoTempoLivreDoOperador =  novoTempoInicioServicoNoRelogio() - ultimoServico().tempoFinalDoServicoNoRelogio;\n\n    const novoServico = {\n      cliente: novoCliente,\n\t\t\ttempoDesdeUltimaChegada: novoTempoDesdeUltimaChegada,\n\t\t\ttempoChegadaNoRelogio: novoTempoChegadaNoRelogio,\n\t\t\ttempoServico: novoTempoDeServico,\n\t\t\ttempoInicioServicoNoRelogio: novoTempoInicioServicoNoRelogio(),\n\t\t\ttempoClienteNaFila: novoTempoClienteNaFila(),\n\t\t\ttempoFinalDoServicoNoRelogio: novoTempoFinalDoServicoNoRelogio,\n\t\t\ttempoClienteNoSistema: novoTempoClienteNoSistema,\n\t\t\ttempoLivreDoOperador: novoTempoLivreDoOperador\n    };\n\n    numeroDeClientesAcumulados = numeroDeClientesAcumulados + 1;\n\n    return novoServico;\n\n  }\n\n  const gerarPrimeiroServico = (NTDUC, NTSNR) => {\n\n    const novoTempoFinalDoServicoNoRelogio = NTDUC + NTSNR;\n    const novoTempoClienteNoSistema = NTSNR ;\n\n    const novoServico = {\n      cliente: 1,\n\t\t\ttempoDesdeUltimaChegada: NTDUC,\n\t\t\ttempoChegadaNoRelogio: NTDUC,\n\t\t\ttempoServico: NTSNR,\n\t\t\ttempoInicioServicoNoRelogio: NTDUC,\n\t\t\ttempoClienteNaFila: 0,\n\t\t\ttempoFinalDoServicoNoRelogio: novoTempoFinalDoServicoNoRelogio,\n\t\t\ttempoClienteNoSistema: novoTempoClienteNoSistema,\n\t\t\ttempoLivreDoOperador: NTDUC\n    };\n\n    return novoServico;\n  }\n\n  const gerarServico = (NTDUC, NTSNR) => {\n    let novoServico;\n\n    let naoEhPrimeiroServico = servicos.length != 0\n    \n    if(naoEhPrimeiroServico)\n      novoServico = gerarNaoPrimeiroServico(NTDUC, NTSNR);\n    else\n      novoServico = gerarPrimeiroServico(NTDUC, NTSNR);\n\n    return novoServico\n  }\n\n  \n//  let tecOpcoes = [\n// \t\t{ id: 1, text: `Determinístico` },\n// \t\t{ id: 2, text: `Aleatório Exponencial` }\n//   ];\n\n//   let tsOpcoes = [\n// \t\t{ id: 1, text: `Determinístico` },\n// \t\t{ id: 2, text: `Aleatório Exponencial` }\n//   ];\n\n\n  const gerarTEC = () => {\n    if (tecSelecionado.id === 1){\n      temposEntreTodasChegadas = [...temposEntreTodasChegadas, inputTEC]\n    }\n\n    if(tecSelecionado.id === 2){\n      let novoTEC = nextExponential(inputLambdaTEC);\n      temposEntreTodasChegadas = [...temposEntreTodasChegadas, novoTEC]\n    }\n  }\n\n  const gerarTS = () => {\n    if (tsSelecionado.id === 1){\n      temposDeTodosOsServicos = [...temposDeTodosOsServicos, inputTS]\n    }\n\n    if(tsSelecionado.id === 2){\n      let novoTS = nextExponential(inputLambdaTS);\n      temposDeTodosOsServicos = [...temposDeTodosOsServicos, novoTS]\n    }\n  }\n\n\n  const simularProblema = () => {\n    var i = 0;\n\n    while (tempoAtualDaSimulação < tempoTotalDeSimulacao ){\n      gerarTEC()\n      gerarTS()\n      \n      let novoServico = gerarServico(temposEntreTodasChegadas[i], temposDeTodosOsServicos[i] );\n      servicos = [...servicos, novoServico];\n      tempoAtualDaSimulação = tempoAtualDaSimulação + novoServico.tempoDesdeUltimaChegada;\n      i++;\n      alimentarDadosDosGraficos();\n      console.log(tempoAtualDaSimulação)\n    }\n\n  }\n\n  // FUNÇÕES DISPARADAS PELOS BOTÕES\n\tconst handleSubmit = (event) => {\n    event.preventDefault();\n    simularProblema();\n\n  }\n\n  const resetSimulation = () => {\n    numeroDeClientesAcumulados = 1;\n    tempoAtualDaSimulação = 0;\n    tempoTotalDeSimulacao = 0;\n    temposEntreTodasChegadas = [];\n    temposDeTodosOsServicos = [];\n    servicos = []\n\n    listaDeTemposMediosNafila = []\n    listaDeTemposMediosDeServico = []\n    listaDeProbabilidadesDeOperadoresLivre = []\n    listaDeProbDeClienteEsperarNaFila = []\n    listaDeTemposMediosDespendidoNoSistema = []\n  }\n\n  const handleSimularSlideClick = () => {\n      resetSimulation()\n      \n      numeroDeServicos = SIMULATION_EXAMPLE.numeroDeServicos;\n      tempoTotalDeSimulacao = SIMULATION_EXAMPLE.tempoTotalDeSimulacao;\n      \n\n      for(let i = 0; i < numeroDeServicos; i++ ){\n        setTimeout(() => {\n          let novoServico = gerarServico(SIMULATION_EXAMPLE.temposEntreTodasChegadas[i],SIMULATION_EXAMPLE.temposDeTodosOsServicos[i])\n          servicos = [...servicos, novoServico];\n          alimentarDadosDosGraficos()\n        },1000 * i)\n      }\n  }\n\n\n  // CONTROLE FORMULÁRIO\n  let tecOpcoes = [\n\t\t{ id: 1, text: `Determinístico` },\n\t\t{ id: 2, text: `Aleatório Exponencial` }\n  ];\n\n  let tsOpcoes = [\n\t\t{ id: 1, text: `Determinístico` },\n\t\t{ id: 2, text: `Aleatório Exponencial` }\n  ];\n\n  let tecSelecionado = \"\";\n  let tsSelecionado = \"\";\n\n  let inputTS = \"\";\n  let inputTEC = \"\";\n\n  let inputLambdaTEC = \"\";\n  let inputLambdaTS = \"\";\n\n \n\n\n</script>\n\n<style>\n  :global(*,*::after,*::before) {\n    padding: 0;\n    margin: 0;\n  }\n\n  @media print {\n    header, footer, form, .btn-imprimir{\n      display: none;\n      visibility: hidden;\n    }\n  }\n\n\n\t\n\tmain{\n\t\tmargin-top:2rem;\n\t\tmax-width: 1400px;\n\t\tmargin: 0 auto;\n\t\tpadding: 1rem;\n\t}\n\n  form{\n    background-color: #fdfdfd;\n    padding:10px;\n  }\n</style>\n\n\n\n<Header/>\n\n<form class=\"container my-5\" on:submit={handleSubmit}>\n  <div class=\"form-row\">\n    <div class=\"form-group col-md-4 offset-md-2\">\n      <label for=\"inputTS\">Tempo da simulação</label>\n      <input required bind:value={tempoTotalDeSimulacao} type=\"number\" min=\"1\" max=\"9999\" class=\"form-control\" id=\"inputTS\" placeholder=\"tempo da simulação\">\n    </div>\n  </div>\n  \n  <!-- Tempo entre chegadas -->\n   <div class=\"form-row\">\n    <div class=\"form-group col-md-4 offset-md-2\">\n      <label for=\"inputTEC\">Tempo entre chegadas</label>\n      <select required class=\"form-control\" value={tecSelecionado} id=\"inputTEC\"  bind:value={tecSelecionado}>\n        <option value={0}>\n          Selecione alguma...\n        </option>\n        {#each tecOpcoes as option}\n          <option value={option}>\n            {option.text}\n          </option>\n        {/each}\n      </select>\n    </div>\n\n  {#if tecSelecionado.id === 1 }\n     <div in:fade  class=\"form-group col-md-4\">\n      <label for=\"inputTEC\">Qual o tempo entre as chegadas?</label>\n      <input type=\"number\" bind:value={inputTEC} class=\"form-control\" id=\"inputTEC\" min=\"1\" max=\"999\" placeholder=\"tempo em minutos\">\n    </div>\n  {:else if tecSelecionado.id === 2}\n    <div in:fade class=\"form-group col-md-2\">\n      <label for=\"inputLambdaExponencial\">Valor do Lambda</label>\n      <input type=\"number\" step=\"0.01\" bind:value={inputLambdaTEC} class=\"form-control\" id=\"inputLambdaExponencial\" placeholder=\"\">\n    </div>\n  {/if}\n\n  </div>\n\n \n  <!-- Tempo de serviços -->\n  <div class=\"form-row\">\n    <div class=\"form-group col-md-4 offset-md-2\">\n      <label for=\"inputTS\">Tempo dos serviços</label>\n      <select required class=\"form-control\" value={tsSelecionado} id=\"inputTS\"  bind:value={tsSelecionado}>\n        <option value={0}>\n          Selecione alguma...\n        </option>\n        {#each tsOpcoes as option}\n          <option value={option}>\n            {option.text}\n          </option>\n        {/each}\n      </select>\n    </div>\n\n  {#if tsSelecionado.id === 1 }\n     <div in:fade  class=\"form-group col-md-4\">\n      <label for=\"inputNumeroDeServicos\">Quantos minutos o serviço demora?</label>\n      <input type=\"number\" bind:value={inputTS} class=\"form-control\" id=\"inputNumeroDeServicos\" min=\"1\" max=\"999\" placeholder=\"tempo em minutos\">\n    </div>\n  {:else if tsSelecionado.id === 2}\n    <div in:fade class=\"form-group col-md-2\">\n      <label for=\"inputNumeroDeServicos\">Valor do Lambda</label>\n      <input type=\"number\" step=\"0.01\" class=\"form-control\" bind:value={inputLambdaTS} id=\"inputNumeroDeServicos\" placeholder=\"\">\n    </div>\n  {/if}\n\n  </div>\n  \n  <div class=\"offset-md-2\">\n    <input type=\"submit\" value=\"Simular\" class=\"btn btn-large btn-primary\">\n\n      <button class=\"btn btn-large btn-danger float-right\" on:click|preventDefault={handleSimularSlideClick}> Simular Exemplo Slide</button>\n  </div>\n  \n  \n</form>\n\n<hr>\n\n<div class=\"container\">\n  <div class=\"d-flex justify-content-end text-right\">\n    <button class=\"btn-imprimir btn btn-secondary\" on:click=\"{() => window.print()}\">Imprimir</button>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <ChartSimulacao  data={listaDeTemposMediosNafila} backgroundColor='#EF5B5B' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Tempo médio na fila de espera\" />\n    </div>\n\n    <div class=\"col-md-4\">\n      <ChartSimulacao  data={listaDeTemposMediosDeServico} backgroundColor='#BAA5FF' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Tempo médio de serviço\" />\n    </div>\n\n    <div class=\"col-md-4\">\n      {#if servicos.length != 0}\n        <div transition:fade=\"{{duration:1000}}\" class=\"pt-4\">\n          <p>Número total de clientes: <span class=\"bg-primary p-1 text-light rounded\">{numeroDeClientesAcumulados}</span></p>\n          <p>Tempo médio de espera na fila: <span class=\"bg-primary p-1 text-light rounded\">{ tempoMedioDeEsperaNaFila().toFixed(2)}</span></p>\n          <p>Probabilidade de um cliente esperar na fila: <span class=\"bg-primary p-1 text-light rounded\">{probabilidadeDeEspera().toFixed(2)}</span></p>\n          <p>Probabilidade do operador livre: <span class=\"bg-primary p-1 text-light rounded\">{probabilidadeDeOperadorLivre().toFixed(2)}</span></p>\n          <p>Tempo médio de serviço: <span class=\"bg-primary p-1 text-light rounded\">{tempoMedioDeServicos().toFixed(2)}</span></p>\n          <p>Tempo médio despendido no sistema: <span class=\"bg-primary p-1 text-light rounded\">{tempoMedioDespendidoNoSistema().toFixed(2)}</span></p>\n        </div>\n      {/if}\n    </div>\n\n  </div>\n\n  <div class=\"row\">\n   <div class=\"col-md-4\">\n      <ChartSimulacao  data={listaDeProbabilidadesDeOperadoresLivre} backgroundColor='#466365' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Probabilidade de operador livre\" />\n    </div>\n\n    <div class=\"col-md-4\">\n      <ChartSimulacao  data={listaDeProbDeClienteEsperarNaFila} backgroundColor='#ABFAA9' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Probabilidade do cliente esperar\" />\n    </div>\n\n     <div class=\"col-md-4\">\n      <ChartSimulacao  data={listaDeTemposMediosDespendidoNoSistema} backgroundColor='#C6B9CD' numeroDeIteracoes={numeroDeServicos || 30} titulo=\"Tempos Médios despendido no sistema\" />\n    </div>\n  </div>\n\n</div>\n\n<hr>\n\n<main>\n  <table class=\"table table-striped table-hover my-4\">\n    <thead class=\"bg-secondary text-light\">\n      <tr>\n        <th scope=\"col\">Cliente</th>\n        <th scope=\"col\">Tempo desde ultima chegada</th>\n        <th scope=\"col\">Tempo de chegada no relogio</th>\n        <th scope=\"col\">Tempo de serviço</th>\n        <th scope=\"col\">Tempo de início do serviço no relógio</th>\n        <th scope=\"col\">Tempo de cliente na fila</th>\n        <th scope=\"col\">Tempo final do serviço no relógio</th>\n        <th scope=\"col\">Tempo do cliente no sistema</th>\n        <th scope=\"col\">Tempo livre do operador</th>\n      </tr>\n    </thead>\n    <tbody>\n      {#if servicos.length != 0}\n        {#each servicos as servico}\n          <tr transition:fade=\"{{duration: 1000, delay: 400}}\">\n            <th scope=\"row\">{servico.cliente}</th>\n            <td>{servico.tempoDesdeUltimaChegada.toFixed(2)}</td>\n            <td>{servico.tempoChegadaNoRelogio.toFixed(2)}</td>\n            <td>{servico.tempoServico.toFixed(2)}</td>\n            <td>{servico.tempoInicioServicoNoRelogio.toFixed(2)}</td>\n            <td>{servico.tempoClienteNaFila.toFixed(2)}</td>\n            <td>{servico.tempoFinalDoServicoNoRelogio.toFixed(2)}</td>\n            <td>{servico.tempoClienteNoSistema.toFixed(2)}</td>\n            <td>{servico.tempoLivreDoOperador.toFixed(2)}</td>\n          </tr>\n\n        {/each}\n      {/if}\n    </tbody>\n  </table>\n\n\n</main>\n\n<Footer/>\n\n\n\n\n\n",
    "<script>\r\n\r\n</script>\r\n\r\n<style>\r\n  .footer {\r\n    background-color: #0B3142;\r\n  }\r\n</style>\r\n\r\n<footer class=\"footer text-center text-light py-4\">\r\n  Desenvolvido por Fabrício Ziliotti, Guilherme Raimondi e Hígor Emanuel\r\n</footer>\r\n",
    "<script>\r\n\r\n</script>\r\n\r\n<style>\r\n \r\n  .header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100px;\r\n    background: #0B3142;\r\n  }\r\n\r\n  .header__title {\r\n\t\tfont-size: 30px;\r\n\t\ttext-transform: uppercase;\r\n    letter-spacing: 3px;\r\n    color: white;\r\n\t}\r\n\t\r\n</style>\r\n\r\n<header class=\"header\">\r\n  <h1 class=\"header__title\">Teoria das filas - Modelo MM1</h1>\r\n</header>\r\n\r\n"
  ],
  "names": [],
  "mappings": "AAgRU,oBAAoB,AAAE,CAAC,AAC7B,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC,AAED,OAAO,KAAK,AAAC,CAAC,AACI,mBAAI,CAAE,4BAAa,CAAC,AAClC,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,MAAM,AACpB,CAAC,AACH,CAAC,AAIF,mBAAI,CAAC,AACJ,WAAW,IAAI,CACf,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,AACd,CAAC,AAEA,mBAAI,CAAC,AACH,gBAAgB,CAAE,OAAO,CACzB,QAAQ,IAAI,AACd,CAAC;ACnSD,OAAO,cAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,AAC3B,CAAC;ACDD,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,cAAc,cAAC,CAAC,AAChB,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,SAAS,CACvB,cAAc,CAAE,GAAG,CACnB,KAAK,CAAE,KAAK,AACf,CAAC"
}